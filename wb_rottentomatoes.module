<?php

/**
 * @file
 * A custom module implementing tweaks for customize functionalities.
 */
define('WB_ROTTENTOMATOES_API_BASE_URL', 'http://api.rottentomatoes.com/api/public/v1.0/');


module_load_include('php', 'wb_rottentomatoes', 'wb_rottentomatoes.lib');

/**
 * Implements hook_init()
 */
function wb_rottentomatoes_init() {
  $rottentomatoes_path = drupal_get_path('module', 'wb_rottentomatoes');
  drupal_add_css($rottentomatoes_path . '/css/wb_rottentomatoes.css', 'module');
}

/**
 * Implements hook_theme()
 */
function wb_rottentomatoes_theme($existing, $type, $theme, $path) {
  return array(
    'movie_info_theme' => array(
      'template' => 'wb_rottentomatoes',
      'variables' => array('movie' => NULL, 'movie_casting' => NULL),
      'path' => drupal_get_path('module', 'wb_rottentomatoes') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wb_rottentomatoes_menu() {
  $items['admin/config/services/rotten-tomatoes-api'] = array(
    'title' => 'Rotten Tomatoes configuration',
    'description' => 'Configure the connection to Rotten Tomatoes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wb_rottentomatoes_configure'),
    'access arguments' => array('administer rotten tomatoes'),
  );
  $items['admin/create/movies'] = array(
    'title' => 'Find and Create Movies',
    'description' => 'Add movie if from rotten tomatoes',
    'page callback' => 'wb_rottentomatoes_find_add_movies',
    'access arguments' => array('create rotten tomatoes movies'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function wb_rottentomatoes_permission() {
  $perms['adminsiter rotten tomatoes'] = array(
    'title' => t('Administer Rotten Tomatoes configuration'),
    'description' => t('Set up the Rotten Tomatoes API module.'),
  );
  $perms['create rotten tomatoes movies'] = array(
    'title' => t('Find and Create Movies Using Rottentomatoes API'),
    'description' => t('Setup rotten tomato movies'),
  );

  return $perms;
}

/**
 * Helper function to return page contents for follow new people page.
 *
 */
function wb_rottentomatoes_find_add_movies() {
  $output = array();

// get all twitter accounts for the current logged in user;
  $output['rottentomatoes_find_movies'][] = drupal_get_form('rottentomatoes_find_movies');
  $output['rottentomatoes_add_movies'][] = drupal_get_form('rottentomatoes_add_movies');
  return drupal_render($output);
}

/**
 * Form callback; Setup the Rotten Tomatoes module.
 */
function rottentomatoes_find_movies() {
  $form['search_movies'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Movies'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['search_movies']['find_movies_by'] = array(
    '#type' => 'select',
    '#title' => t('Search Movie By'),
    '#options' => array(
      "by_title" => t('Search Movie By Title'),
      "by_rotten_id" => t('Search Movie By Rotten ID'),
      "by_imdb_id" => t('Search Movie By IMDB ID'),
    ),
    '#default_value' => variable_get('find_movies_by'),
  );
  $form['search_movies']['movie_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Movie Title'),
    '#description' => t("Enter Movie Title"),
    '#states' => array(
      'visible' => array(
        'select[name="find_movies_by"]' => array('value' => 'by_title'),
      ),
    ),
  );
  $form['search_movies']['movie_rotten_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Movie Rotten Id'),
    '#description' => t("Enter Rotten ID of Movie"),
    '#states' => array(
      'visible' => array(
        'select[name="find_movies_by"]' => array('value' => 'by_rotten_id'),
      ),
    ),
  );
  $form['search_movies']['movie_imdb_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Movie IMDB Id'),
    '#description' => t("Enter IMDB ID of Movie"),
    '#states' => array(
      'visible' => array(
        'select[name="find_movies_by"]' => array('value' => 'by_imdb_id'),
      ),
    ),
  );
  $form['search_movies']['results_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of movies in one page'),
    '#description' => t("Enter number of movies you want per page"),
    '#states' => array(
      'visible' => array(
        'select[name="find_movies_by"]' => array('value' => 'by_title'),
      ),
    ),
  );
  $form['search_movies']['page_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Number'),
    '#description' => t('Enter page number you want results of'),
    '#states' => array(
      'visible' => array(
        'select[name="find_movies_by"]' => array('value' => 'by_title'),
      ),
    ),
  );
  $form['search_movies']['search_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Find',
    '#name' => 'search_submit',
    '#submit' => array('wb_rottentomatoes_search_movies_submit'),
  );
  $form['find_similar_movies'] = array(
    '#type' => 'fieldset',
    '#title' => t('Find Similar Movies By Rotten ID'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['find_similar_movies']['similar_movie_by_rotten_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Movie Rotten Id'),
    '#description' => t("Enter Rotten ID of Movie to Find Similar Movies"),
  );
  $form['find_similar_movies']['similar_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Find',
    '#name' => 'similar_submit',
    '#submit' => array('wb_rottentomatoes_find_similar_movies_submit'),
  );
  $form['upcoming_movies'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upcoming Movies'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['upcoming_movies']['upcoming_movie_country'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter country'),
    '#description' => t("Enter Country you want to get upcoming movies"),
  );
  $form['upcoming_movies']['upcoming_movie_results_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of movies in one page'),
    '#description' => t("Enter number of movies you want per page"),
  );
  $form['upcoming_movies']['upcoming_movie_page_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Number'),
    '#description' => t('Enter page number you want results of'),
  );
  $form['upcoming_movies']['upcoming_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Find',
    '#name' => 'upcoming_submit',
    '#submit' => array('wb_rottentomatoes_find_upcoming_movies_submit'),
  );
  $form['top_earning_movies'] = array(
    '#type' => 'fieldset',
    '#title' => t('Top Earning Movies'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['top_earning_movies']['top_earning_movie_country'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter country'),
    '#description' => t("Enter Country you want to get upcoming movies"),
  );
  $form['top_earning_movies']['top_earning_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Find',
    '#name' => 'top_earning_submit',
    '#submit' => array('wb_rottentomatoes_find_top_earning_movies_submit'),
  );

  return $form;
}

/**
 *  Submit Handler for wb_rottentomatoes_find_add_movies()
 *  Call Rotten Tomatoe API's.
 */
function wb_rottentomatoes_search_movies_submit(&$form, &$form_state) {
  $params = array();
  if ($form_state['values']['find_movies_by'] == "by_title") {
    $params['type'] = "by_title";
    $params['movie_title'] = $form_state['values']['movie_title'];
    $params['page_limit'] = $form_state['values']['results_count'];
    $params['page'] = $form_state['values']['page_number'];
    $search_movie_results = rottentomatoes_connect($params);
    if (isset($search_movie_results['movies']) && count($search_movie_results['movies']) > 0) {
      $_SESSION['search_movie_results'] = $search_movie_results['movies'];
    }
  }
  elseif ($form_state['values']['find_movies_by'] == "by_rotten_id") {
    $params['type'] = "by_rotten_id";
    $params['movie_rotten_id'] = (string) $form_state['values']['movie_rotten_id'];
    $search_movie_results_by_rotten_id = rottentomatoes_connect($params);
    if (isset($search_movie_results_by_rotten_id['movies']) && count($search_movie_results_by_rotten_id['movies']) > 0) {
      $_SESSION['search_movie_results'] = $search_movie_results_by_rotten_id['movies'];
    }
  }
  else {
    $params['type'] = "by_imdb_id";
    $params['movie_imdb_id'] = (string) $form_state['values']['movie_imdb_id'];
    $search_movie_results_by_imdb_id = rottentomatoes_connect($params);
    if (is_array($search_movie_results_by_imdb_id) && count($search_movie_results_by_imdb_id) > 0) {
      $_SESSION['search_movie_results'] = $search_movie_results_by_imdb_id;
    }
  }
  drupal_set_message("Form Submitted Successfully", "status");
}

/**
 *  Submit Handler for wb_rottentomatoes_find_add_movies()
 *  Call Rotten Tomatoe API's.
 */
function wb_rottentomatoes_find_similar_movies_submit(&$form, &$form_state) {
  $params = array();
  $params['type'] = "similar_movies_by_rotten_id";
  $params['similar_movies_by_rotten_id'] = $form_state['values']['similar_movie_by_rotten_id'];
  $similar_movie_by_rotten_id = rottentomatoes_connect($params);
  if (isset($similar_movie_by_rotten_id['movies']) && count($similar_movie_by_rotten_id['movies']) > 0) {
    $_SESSION['search_movie_results'] = $similar_movie_by_rotten_id['movies'];
  }
  drupal_set_message("Form Submitted Successfully", "status");
}

/**
 *  Submit Handler for wb_rottentomatoes_find_add_movies()
 *  Call Rotten Tomatoe API's.
 */
function wb_rottentomatoes_find_upcoming_movies_submit(&$form, &$form_state) {
  $params = array();
  $params['type'] = "upcoming_movies";
  $params['country'] = $form_state['values']['upcoming_movie_country'];
  $params['page_limit'] = $form_state['values']['upcoming_movie_results_count'];
  $params['page'] = $form_state['values']['upcoming_movie_page_number'];
  $upcoming_movies = rottentomatoes_connect($params);
  if (isset($upcoming_movies['movies']) && count($upcoming_movies['movies']) > 0) {
    $_SESSION['search_movie_results'] = $upcoming_movies['movies'];
  }
  drupal_set_message("Form Submitted Successfully", "status");
}

/**
 *  Submit Handler for wb_rottentomatoes_find_add_movies()
 *  Call Rotten Tomatoe API's.
 */
function wb_rottentomatoes_find_top_earning_movies_submit(&$form, &$form_state) {
  $params = array();
  $params['type'] = "top_earning_movies";
  $params['country'] = $form_state['values']['top_earning_movie_country'];
  $top_earning_movie = rottentomatoes_connect($params);
  if (isset($top_earning_movie['movies']) && count($top_earning_movie['movies']) > 0) {
    $_SESSION['search_movie_results'] = $top_earning_movie['movies'];
  }
  drupal_set_message("Form Submitted Successfully", "status");
}

/**
 * Form callback; Setup the Rotten Tomatoes module.
 */
function wb_rottentomatoes_configure() {
  $form['wb_rotten_tomatoes_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => variable_get('wb_rotten_tomatoes_api_key', ''),
    '#description' => t('Enter your Rotten Tomatoes API key.  If you do not have one, they can be obtained from <a href="!url">The Rotten Tomatoes site</a>.', array('!url' => 'http://developer.rottentomatoes.com/member/register')),
  );
  $form['wb_rotten_tomatoes_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Rotten Tomatoes API Url'),
    '#default_value' => variable_get('wb_rotten_tomatoes_api_url', WB_ROTTENTOMATOES_API_BASE_URL),
  );
  $form['rottentomatoes_format'] = array(
    '#type' => 'select',
    '#title' => t('Select API return format'),
    '#options' => array(
      ".json" => t('JSON'),
      ".xml" => t('XML'),
    ),
    '#default_value' => variable_get('rottentomatoes_format'),
  );
  return system_settings_form($form);
}

/**
 *  Bridging function to connect to Rotten Tomato API's
 */
function rottentomatoes_connect($params) {
  $rotten_tomatoes = new WB_Rottentomatoes();
  if ($params['type'] == "by_title") {
    if ($params['page_limit'] == "") {
      $params['page_limit'] = '30';
    }
    if ($params['page'] == "") {
      $params['page'] = '1';
    }
    $response = $rotten_tomatoes->search_movie_by_title($params['movie_title'], $params['page_limit'], $params['page']);
  }
  elseif ($params['type'] == "by_rotten_id") {
    $response = $rotten_tomatoes->search_movie_by_rotten_id($params['movie_rotten_id']);
  }
  elseif ($params['type'] == "by_imdb_id") {
    $response = $rotten_tomatoes->search_movie_by_imdb_id($params['movie_imdb_id']);
  }
  elseif ($params['type'] == "similar_movies_by_rotten_id") {
    $response = $rotten_tomatoes->similar_movies_by_rotten_id($params['similar_movies_by_rotten_id']);
  }
  elseif ($params['type'] == "upcoming_movies") {
    if ($params['page_limit'] == "") {
      $params['page_limit'] = '16';
    }
    if ($params['page'] == "") {
      $params['page'] = '1';
    }
    $response = $rotten_tomatoes->upcoming_movies($params['page_limit'], $params['page'], $params['country']);
  }
  elseif ($params['type'] == "top_earning_movies") {
    $response = $rotten_tomatoes->top_earning_movies($params['country']);
  }
  return $response;
}

/**
 * Show display results of movies form rotten tomatoes
 */
function rottentomatoes_add_movies($form, $form_state) {
  if (isset($_SESSION['search_movie_results'])) {

//Get the twitter accounts info as options for checkboxes.
    $options = rottentomato_get_movies_options($_SESSION['search_movie_results']);
    $options_fast_select = rottentomato_get_movies_as_fast_select_options($_SESSION['search_movie_results']);
    $form['movies_results_as_fast_select_fieldset'] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attributes' => array(
        'class' => array('fast-select-results'),
      ),
    );
    foreach ($options_fast_select as $option_fast_select) {
      $form['movies_results_as_fast_select_fieldset']['movies_fast_select'][] = array(
        '#type' => 'markup',
        '#markup' => $option_fast_select,
        '#weight' => '1',
      );
    }
    $form['movies_results_fieldset'] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attributes' => array(
        'class' => array('select-results'),
      ),
    );
    $form['movies_results_fieldset']['movies_results'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#prefix' => '<div class ="movies-results-to-add">',
      '#suffix' => '</div>',
      '#attributes' => array(
        'class' => array('movie-results-to-add'),
      ),
      '#weight' => '2',
    );
    $form['movies_to_add'] = array(
      '#type' => 'submit',
      '#submit' => array('rottentomatoes_add_movie_submit'),
      '#value' => 'click to add selected movies',
      '#prefix' => '<div class ="add-movie-submit">',
      '#suffix' => '</div>',
      '#weight' => '10',
    );
  }

  return $form;
}

/**
 * Submit handler
 * @param type $movies
 * @return string
 */
function rottentomatoes_add_movie_submit(&$form, &$form_state) {
  $rotten_ids = array();
  drupal_set_message("form submittied");
  // Get checked movies
  foreach ($form_state['values']['movies_results'] as $movie_result) {
    if ($movie_result != 0) {
      $rotten_ids[] = $movie_result;
    }
  }

  // Get selected movie information from $_SESSION
  if (count($rotten_ids) > 0) {
    wb_rottentomatoes_save_movie($rotten_ids);
  }
  else {
    form_set_error("", t("Select atleast 1 movie you want to save"));
  }
}

/**
 * Helper function to save movies
 */
function wb_rottentomatoes_save_movie($rotten_ids) {
  $selected_movies = array();
  foreach ($rotten_ids as $rotten_id) {
    foreach ($_SESSION['search_movie_results'] as $movie_item) {
      if ($movie_item['id'] == $rotten_id) {
        $selected_movies[] = $movie_item;
        break;
      }
    }
  }
  if (count($selected_movies) > 0) {
    foreach ($selected_movies as $selected_movie) {
      wb_rottentomatoes_create_node($selected_movie, "save");
    }
  }
}

/**
 * Helper function to save node.
 */
function wb_rottentomatoes_create_node($selected_movie) {
  $existing_node = rotten_movie_exists($selected_movie['id']);
  if (!is_array($existing_node) && $existing_node == 0) {
    global $user;
    $node = new stdClass();
    $node->type = "rt_movie";
    //node_object_prepare($node);
    $node->uid = $user->uid;
    $node_status = rt_movie_node_handler($selected_movie, "save", $node);
    if ($node_status == TRUE) {
      drupal_set_message(t('Node created successfully'), 'status');
    }
  }
  else {
    $existing_node_object = node_load($existing_node[0]);
    $node_status = rt_movie_node_handler($selected_movie, "update", $existing_node_object);
    drupal_set_message(t('Node updated successfully'), 'status');
  }
}

/**
 * Helper functin to check if a rt_movie node with rotten_id already exists.
 * Returns nid for the existing node or returns 0
 */
function rotten_movie_exists($rotten_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'rt_movie')
      ->fieldCondition('field_rt_id', 'value', $rotten_id, '=');
  $results = $query->execute();
  if (is_array($results) && count($results) > 0) {
    foreach ($results as $result) {
      $existing_nodes = current(array_keys($result));
      return $existing_nodes;
    }
  }
  else {
    return 0;
  }
  dpm($result);
}

/**
 * Helper function to map rt_movie nodes with API data.
 * Add or update nodes.
 */
function rt_movie_node_handler($selected_movie, $key = "save", $node) {
  $node->language = LANGUAGE_NONE;
  foreach ($selected_movie as $field_key => $field_value) {
    if ($field_key == "ratings") {
      if (is_array($field_value) && count($field_value) > 0) {
        if (isset($field_value['critics_rating'])) {
          $node->field_rt_ratings_critics_rating[$node->language][0]['value'] = $field_value['critics_rating'];
        }
        if (isset($field_value['critics_score'])) {
          $node->field_rt_ratings_critics_score[$node->language][0]['value'] = $field_value['critics_score'];
        }
        if (isset($field_value['audience_rating'])) {
          $node->field_rt_ratings_audience_rating[$node->language][0]['value'] = $field_value['audience_rating'];
        }
        if (isset($field_value['audience_score'])) {
          $node->field_rt_ratings_audience_score[$node->language][0]['value'] = $field_value['audience_score'];
        }
      }
    }if ($field_key == "title") {
      $node->$field_key = $field_value;
    }
    // To Do: check how to save multivalued field.
    if ($field_key == "genres") {
      
    }

    if ($field_key == "release_dates") {
      $release_dates = "";
      foreach ($field_value as $key => $value) {
        $release_dates .= $key . '|' . $value;
      }
      $node->field_rt_release_dates[$node->language][0]['value'] = $release_dates;
    }if ($field_key == "alternate_ids") {
      $node->field_rt_imdb_id[$node->language][0]['value'] = $field_value['imdb'];
    }if ($field_key == "abridged_cast") {
      $abridged_casting = "";
      foreach ($field_value as $key => $value) {
        $abridged_casting .= $value['name'] . '|' . $value['characters'][0];
      }
      $node->field_rt_abridged_cast[$node->language][0]['value'] = $abridged_casting;
    }
    if ($field_key == "abridged_directors") {
      foreach ($field_value as $key => $value) {
        $abridged_directors .= $value['name'] . '|' . $value['characters'][0];
      }
      $node->field_rt_abridged_directors[$node->language][0]['value'] = $abridged_directors;
    }
    if ($field_key == "id") {
      $node->field_rt_id[$node->language][0]['value'] = $field_value;
    }
    if ($field_key == "year") {
      $node->field_rt_year[$node->language][0]['value'] = $field_value;
    }
    if ($field_key == "synopsis") {
      $node->field_rt_synopsis[$node->language][0]['value'] = $field_value;
    }
    if ($field_key == "mpaa_rating") {
      $node->field_rt_mpaa_rating[$node->language][0]['value'] = $field_value;
    }
    if ($field_key == "critics_consensus") {
      $node->field_rt_critics_consensus[$node->language][0]['value'] = $field_value;
    }
  }
  if ($key == "update" && isset($selected_movie['id'])) {
    $full_cast = get_full_cast($selected_movie['id']);
    $node->field_rt_full_cast[$node->language][0]['value'] = $full_cast;
  }
  // Prepare node for a submit
  $node = node_submit($node);
  // Save node
  try {
    node_save($node);
    $node_save = TRUE;
  }
  catch (Exception $e) {
    watchdog('rotten_tomatoes', $e, array(), WATCHDOG_ERROR);
    $node_save = FALSE;
  }
  return $node_save;
}

/**
 * Helper function to get full cast.
 * To Do: Use this function while updating single rt_movie node.
 * @param
 *   String $rotten_id "the rotten id to get full cast for."
 */
function get_full_cast($rotten_id) {
  $rotten_tomatoes = new WB_Rottentomatoes($rotten_id);
  $casting_response = $rotten_tomatoes->get_full_movie_cast($rotten_id);
  $full_cast = "";
  if (is_array($casting_response) && isset($casting_response['cast'])) {
    if (is_array($casting_response['cast']) && count($casting_response['cast'])) {
      foreach ($casting_response['cast'] as $cast_key => $cast_value) {
        $full_cast .= $cast_value['name'] . '|' . $cast_value['characters'][0];
      }
    }
  }
  return $full_cast;
}

/**
 *  function to return the options for twitters account to select.
 *
 */
function rottentomato_get_movies_options($movies) {
  $options = array();
  if (is_array($movies)) {
    foreach ($movies as $movie) {
      $key = $movie['id'];
      $options[$key] = theme('image', array('path' => $movie['posters']['profile'])) .
          theme('movie_info_theme', array(
            'movie' => $movie,
            'movie_casting' => rottentomatoes_movie_casting($movie['abridged_cast'])
      ));
    }
  } return $options;
}

/**
 * Helper function to return Casting HTML
 */
function rottentomatoes_movie_casting($casting) {
  $casting_html = '';
  foreach ($casting as $cast) {
    $character_name = (isset($cast['characters'][0])) ? $cast['characters'][0] : "NA";
    $casting_html .= '<div class="cast">' . $cast['name'] . '|' . $character_name . '</div>';
  }
  return $casting_html;
}

/**
 *  function to return the options for twitters account to select.
 *
 */
function rottentomato_get_movies_as_fast_select_options($movies) {
  $options = array();
  if (is_array($movies)) {
    foreach ($movies as $movie) {
      $key = $movie['id'];
      $options[$key] = '<div rel="' . $movie['id'] . '" class="' . 'fast-select-item' . '">' .
          theme('image', array('path' => $movie['posters']['profile'])) .
          '</div>';
    }
  } return $options;
}
